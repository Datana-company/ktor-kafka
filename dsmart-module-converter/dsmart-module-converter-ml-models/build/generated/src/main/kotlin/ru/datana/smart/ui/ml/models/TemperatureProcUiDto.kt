/**
* Транспортные модели для Конвертера
* Транспортные модели для связи различных компонентов IoT-прототипа конвертера
*
* The version of the OpenAPI document: 0.0.1
* Contact: okatov@datana.ru
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package ru.datana.smart.ui.ml.models

import ru.datana.smart.ui.ml.models.TemperatureScale

import com.fasterxml.jackson.annotation.JsonProperty
/**
 * Структура данных, которая отдается из flink-процессинга на UI
 * @param version 
 * @param sensorId Идентификатор сенсора, для которого подготовлена агрегация
 * @param timeIntervalLatest Самая поздняя точка временного интервала, для которого производится агрегация
 * @param timeIntervalEarliest Самая ранняя точка временного интервала, для которого производится агрегация
 * @param temperatureScale 
 * @param temperatureAverage Средняя температура за период между [[timeIntervalEarliest]] и [[timeIntervalLatest]]
 * @param temperatureMin Минимальная температура за период между [[timeIntervalEarliest]] и [[timeIntervalLatest]]
 * @param temperatureMax Максимальная температура за период между [[timeIntervalEarliest]] и [[timeIntervalLatest]]
 */

data class TemperatureProcUiDto (
    @JsonProperty("version")
    val version: kotlin.String? = null,
    /* Идентификатор сенсора, для которого подготовлена агрегация */
    @JsonProperty("sensorId")
    val sensorId: kotlin.String? = null,
    /* Самая поздняя точка временного интервала, для которого производится агрегация */
    @JsonProperty("timeIntervalLatest")
    val timeIntervalLatest: kotlin.Long? = null,
    /* Самая ранняя точка временного интервала, для которого производится агрегация */
    @JsonProperty("timeIntervalEarliest")
    val timeIntervalEarliest: kotlin.Long? = null,
    @JsonProperty("temperatureScale")
    val temperatureScale: TemperatureScale? = null,
    /* Средняя температура за период между [[timeIntervalEarliest]] и [[timeIntervalLatest]] */
    @JsonProperty("temperatureAverage")
    val temperatureAverage: kotlin.Double? = null,
    /* Минимальная температура за период между [[timeIntervalEarliest]] и [[timeIntervalLatest]] */
    @JsonProperty("temperatureMin")
    val temperatureMin: kotlin.Double? = null,
    /* Максимальная температура за период между [[timeIntervalEarliest]] и [[timeIntervalLatest]] */
    @JsonProperty("temperatureMax")
    val temperatureMax: kotlin.Double? = null
)

